<android.accessibilityservice.AccessibilityService: FingerprintGestureController getFingerprintGestureController()>
<android.app.ActivityManager: void dumpPackageState(FileDescriptor,String)>
<android.app.ActivityManager: void killBackgroundProcesses(String)>
<android.app.ActivityManager: void moveTaskToFront(int,int)>
<android.app.ActivityManager: void moveTaskToFront(int,int,Bundle)>
<android.app.AlarmManager: void setTime(long)>
<android.app.AlarmManager: void setTimeZone(String)>
<android.app.KeyguardManager.KeyguardLock: void disableKeyguard()>
<android.app.KeyguardManager.KeyguardLock: void reenableKeyguard()>
<android.app.KeyguardManager: void exitKeyguardSecurely(OnKeyguardExitResult)>
<android.app.WallpaperManager: Drawable getFastDrawable()>
<android.app.WallpaperManager: Drawable peekFastDrawable()>
<android.app.WallpaperManager: ParcelFileDescriptor getWallpaperFile(int)>
<android.app.WallpaperManager: int setBitmap(Bitmap,Rect,boolean)>
<android.app.WallpaperManager: int setBitmap(Bitmap,Rect,boolean,int)>
<android.app.WallpaperManager: int setResource(int,int)>
<android.app.WallpaperManager: int setStream(InputStream,Rect,boolean)>
<android.app.WallpaperManager: int setStream(InputStream,Rect,boolean,int)>
<android.app.WallpaperManager: void clear()>
<android.app.WallpaperManager: void clear(int)>
<android.app.WallpaperManager: void clearWallpaper()>
<android.app.WallpaperManager: void setBitmap(Bitmap)>
<android.app.WallpaperManager: void setDisplayPadding(Rect)>
<android.app.WallpaperManager: void setResource(int)>
<android.app.WallpaperManager: void setStream(InputStream)>
<android.app.admin.DevicePolicyManager: int getPasswordComplexity()>
<android.app.job.JobInfo.Builder: Builder setPersisted(boolean)>
<android.bluetooth.BluetoothAdapter: BluetoothServerSocket listenUsingInsecureL2capChannel()>
<android.bluetooth.BluetoothAdapter: BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(String,UUID)>
<android.bluetooth.BluetoothAdapter: BluetoothServerSocket listenUsingL2capChannel()>
<android.bluetooth.BluetoothAdapter: BluetoothServerSocket listenUsingRfcommWithServiceRecord(String,UUID)>
<android.bluetooth.BluetoothAdapter: Set<BluetoothDevice> getBondedDevices()>
<android.bluetooth.BluetoothAdapter: String getAddress()>
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>
<android.bluetooth.BluetoothAdapter: boolean disable()>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()>
<android.bluetooth.BluetoothAdapter: boolean isEnabled()>
<android.bluetooth.BluetoothAdapter: boolean setName(String)>
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>
<android.bluetooth.BluetoothAdapter: boolean startLeScan(LeScanCallback)>
<android.bluetooth.BluetoothAdapter: boolean startLeScan(UUID[],LeScanCallback)>
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>
<android.bluetooth.BluetoothAdapter: int getScanMode()>
<android.bluetooth.BluetoothAdapter: int getState()>
<android.bluetooth.BluetoothAdapter: void stopLeScan(LeScanCallback)>
<android.bluetooth.BluetoothDevice: BluetoothClass getBluetoothClass()>
<android.bluetooth.BluetoothDevice: BluetoothSocket createInsecureL2capChannel(int)>
<android.bluetooth.BluetoothDevice: BluetoothSocket createInsecureRfcommSocketToServiceRecord(UUID)>
<android.bluetooth.BluetoothDevice: BluetoothSocket createL2capChannel(int)>
<android.bluetooth.BluetoothDevice: BluetoothSocket createRfcommSocketToServiceRecord(UUID)>
<android.bluetooth.BluetoothDevice: ParcelUuid[] getUuids()>
<android.bluetooth.BluetoothDevice: String getAlias()>
<android.bluetooth.BluetoothDevice: String getName()>
<android.bluetooth.BluetoothDevice: boolean createBond()>
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()>
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)>
<android.bluetooth.BluetoothDevice: int getBondState()>
<android.bluetooth.BluetoothDevice: int getType()>
<android.bluetooth.BluetoothManager: List<BluetoothDevice> getConnectedDevices(int)>
<android.bluetooth.BluetoothManager: List<BluetoothDevice> getDevicesMatchingConnectionStates(int,int[])>
<android.bluetooth.BluetoothManager: int getConnectionState(BluetoothDevice,int)>
<android.bluetooth.BluetoothProfile: List<BluetoothDevice> getConnectedDevices()>
<android.bluetooth.BluetoothProfile: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothProfile: int getConnectionState(BluetoothDevice)>
<android.bluetooth.le.BluetoothLeScanner: int startScan(List<ScanFilter>,ScanSettings,PendingIntent)>
<android.bluetooth.le.BluetoothLeScanner: void startScan(List<ScanFilter>,ScanSettings,ScanCallback)>
<android.bluetooth.le.BluetoothLeScanner: void startScan(ScanCallback)>
<android.bluetooth.le.BluetoothLeScanner: void stopScan(PendingIntent)>
<android.bluetooth.le.BluetoothLeScanner: void stopScan(ScanCallback)>
<android.content.Context: void removeStickyBroadcast(Intent)>
<android.content.Context: void removeStickyBroadcastAsUser(Intent,UserHandle)>
<android.content.Context: void sendBroadcastAsUser(Intent,UserHandle)>
<android.content.Context: void sendBroadcastAsUser(Intent,UserHandle,String)>
<android.content.Context: void sendOrderedBroadcastAsUser(Intent,UserHandle,String,BroadcastReceiver,Handler,int,String,Bundle)>
<android.content.Context: void sendStickyBroadcast(Intent)>
<android.content.Context: void sendStickyBroadcastAsUser(Intent,UserHandle)>
<android.content.Context: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>
<android.content.Context: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>
<android.content.pm.PackageInstaller: void installExistingPackage(String,int,IntentSender)>
<android.content.pm.PackageInstaller: void uninstall(String,IntentSender)>
<android.content.pm.PackageInstaller: void uninstall(VersionedPackage,IntentSender)>
<android.content.pm.PackageManager: Set<String> getWhitelistedRestrictedPermissions(String,int)>
<android.content.pm.PackageManager: boolean addWhitelistedRestrictedPermission(String,String,int)>
<android.content.pm.PackageManager: boolean removeWhitelistedRestrictedPermission(String,String,int)>
<android.content.pm.PackageManager: void setApplicationEnabledSetting(String,int,int)>
<android.content.pm.PackageManager: void setComponentEnabledSetting(ComponentName,int,int)>
<android.hardware.biometrics.BiometricManager: int canAuthenticate()>
<android.hardware.biometrics.BiometricPrompt: void authenticate(CancellationSignal,Executor,AuthenticationCallback)>
<android.hardware.biometrics.BiometricPrompt: void authenticate(CryptoObject,CancellationSignal,Executor,AuthenticationCallback)>
<android.hardware.camera2.CameraManager: void openCamera(String,Executor,StateCallback)>
<android.hardware.camera2.CameraManager: void openCamera(String,StateCallback,Handler)>
<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>
<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()>
<android.hardware.fingerprint.FingerprintManager: void authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)>
<android.hardware.lights.LightsManager.LightsSession: void close()>
<android.hardware.lights.LightsManager.LightsSession: void setLights(LightsRequest)>
<android.location.LocationManager: GpsStatus getGpsStatus(GpsStatus)>
<android.location.LocationManager: Location getLastKnownLocation(String)>
<android.location.LocationManager: boolean addGpsStatusListener(Listener)>
<android.location.LocationManager: boolean addNmeaListener(NmeaListener)>
<android.location.LocationManager: boolean addNmeaListener(OnNmeaMessageListener)>
<android.location.LocationManager: boolean addNmeaListener(OnNmeaMessageListener,Handler)>
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(Callback)>
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(Callback,Handler)>
<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(Callback,Handler)>
<android.location.LocationManager: boolean registerGnssStatusCallback(Callback)>
<android.location.LocationManager: boolean registerGnssStatusCallback(Callback,Handler)>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(String,long,float,LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(String,long,float,LocationListener,Looper)>
<android.location.LocationManager: void requestLocationUpdates(String,long,float,PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(long,float,Criteria,LocationListener,Looper)>
<android.location.LocationManager: void requestLocationUpdates(long,float,Criteria,PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(Criteria,LocationListener,Looper)>
<android.location.LocationManager: void requestSingleUpdate(Criteria,PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(String,LocationListener,Looper)>
<android.location.LocationManager: void requestSingleUpdate(String,PendingIntent)>
<android.net.ConnectivityManager: LinkProperties getLinkProperties(Network)>
<android.net.ConnectivityManager: Network getActiveNetwork()>
<android.net.ConnectivityManager: NetworkCapabilities getNetworkCapabilities(Network)>
<android.net.ConnectivityManager: NetworkInfo getActiveNetworkInfo()>
<android.net.ConnectivityManager: NetworkInfo getNetworkInfo(Network)>
<android.net.ConnectivityManager: NetworkInfo getNetworkInfo(int)>
<android.net.ConnectivityManager: NetworkInfo[] getAllNetworkInfo()>
<android.net.ConnectivityManager: Network[] getAllNetworks()>
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
<android.net.ConnectivityManager: int getMultipathPreference(Network)>
<android.net.ConnectivityManager: int getNetworkPreference()>
<android.net.ConnectivityManager: void registerDefaultNetworkCallback(NetworkCallback)>
<android.net.ConnectivityManager: void registerDefaultNetworkCallback(NetworkCallback,Handler)>
<android.net.ConnectivityManager: void registerNetworkCallback(NetworkRequest,NetworkCallback)>
<android.net.ConnectivityManager: void registerNetworkCallback(NetworkRequest,NetworkCallback,Handler)>
<android.net.ConnectivityManager: void registerNetworkCallback(NetworkRequest,PendingIntent)>
<android.net.TetheringManager.TetheringRequest.Builder: Builder setExemptFromEntitlementCheck(boolean)>
<android.net.TetheringManager.TetheringRequest.Builder: Builder setShouldShowEntitlementUi(boolean)>
<android.net.TetheringManager.TetheringRequest.Builder: Builder setStaticIpv4Addresses(LinkAddress,LinkAddress)>
<android.net.wifi.WifiManager: List<PasspointConfiguration> getPasspointConfigurations()>
<android.net.wifi.WifiManager: List<WifiConfiguration> getConfiguredNetworks()>
<android.net.wifi.WifiManager: int addNetworkSuggestions(List<WifiNetworkSuggestion>)>
<android.net.wifi.WifiManager: int removeNetworkSuggestions(List<WifiNetworkSuggestion>)>
<android.net.wifi.WifiManager: void removePasspointConfiguration(String)>
<android.net.wifi.p2p.WifiP2pManager: void addLocalService(Channel,WifiP2pServiceInfo,ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void connect(Channel,WifiP2pConfig,ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void createGroup(Channel,ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void createGroup(Channel,WifiP2pConfig,ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(Channel,ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void discoverServices(Channel,ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestDeviceInfo(Channel,DeviceInfoListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(Channel,GroupInfoListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(Channel,PeerListListener)>
<android.net.wifi.rtt.WifiRttManager: void startRanging(RangingRequest,Executor,RangingResultCallback)>
<android.nfc.cardemulation.CardEmulation: CharSequence getDescriptionForPreferredPaymentService()>
<android.nfc.cardemulation.CardEmulation: List<String> getAidsForPreferredPaymentService()>
<android.nfc.cardemulation.CardEmulation: String getRouteDestinationForPreferredPaymentService()>
<android.nfc.cardemulation.CardEmulation: boolean setOffHostForService(ComponentName,String)>
<android.nfc.cardemulation.CardEmulation: boolean unsetOffHostForService(ComponentName)>
<android.os.Build: String getSerial()>
<android.os.DropBoxManager: Entry getNextEntry(String,long)>
<android.os.PowerManager: void reboot(String)>
<android.os.RecoverySystem: void installPackage(Context,File)>
<android.os.Vibrator: void cancel()>
<android.os.Vibrator: void vibrate(VibrationEffect)>
<android.os.Vibrator: void vibrate(VibrationEffect,AudioAttributes)>
<android.os.Vibrator: void vibrate(long)>
<android.os.Vibrator: void vibrate(long,AudioAttributes)>
<android.os.Vibrator: void vibrate(long[],int)>
<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>
<android.os.image.DynamicSystemManager.Session: boolean commit()>
<android.os.image.DynamicSystemManager.Session: boolean getAvbPublicKey(AvbPublicKey)>
<android.os.image.DynamicSystemManager.Session: boolean setAshmem(ParcelFileDescriptor,long)>
<android.os.image.DynamicSystemManager.Session: boolean submitFromAshmem(int)>
<android.telecom.TelecomManager: List<PhoneAccountHandle> getCallCapablePhoneAccounts()>
<android.telecom.TelecomManager: List<PhoneAccountHandle> getSelfManagedPhoneAccounts()>
<android.telecom.TelecomManager: PhoneAccountHandle getDefaultOutgoingPhoneAccount(String)>
<android.telecom.TelecomManager: PhoneAccountHandle getUserSelectedOutgoingPhoneAccount()>
<android.telecom.TelecomManager: String getLine1Number(PhoneAccountHandle)>
<android.telecom.TelecomManager: String getVoiceMailNumber(PhoneAccountHandle)>
<android.telecom.TelecomManager: Uri getAdnUriForPhoneAccount(PhoneAccountHandle)>
<android.telecom.TelecomManager: boolean endCall()>
<android.telecom.TelecomManager: boolean handleMmi(String)>
<android.telecom.TelecomManager: boolean handleMmi(String,PhoneAccountHandle)>
<android.telecom.TelecomManager: boolean isInCall()>
<android.telecom.TelecomManager: boolean isInManagedCall()>
<android.telecom.TelecomManager: boolean isTtySupported()>
<android.telecom.TelecomManager: boolean isVoiceMailNumber(PhoneAccountHandle,String)>
<android.telecom.TelecomManager: void acceptRingingCall()>
<android.telecom.TelecomManager: void acceptRingingCall(int)>
<android.telecom.TelecomManager: void cancelMissedCallsNotification()>
<android.telecom.TelecomManager: void placeCall(Uri,Bundle)>
<android.telecom.TelecomManager: void showInCallScreen(boolean)>
<android.telecom.TelecomManager: void silenceRinger()>
<android.telephony.PhoneStateListener: void onCallDisconnectCauseChanged(int,int)>
<android.telephony.PhoneStateListener: void onDisplayInfoChanged(TelephonyDisplayInfo)>
<android.telephony.PhoneStateListener: void onImsCallDisconnectCauseChanged(ImsReasonInfo)>
<android.telephony.PhoneStateListener: void onPreciseDataConnectionStateChanged(PreciseDataConnectionState)>
<android.telephony.SmsManager: String getSmscAddress()>
<android.telephony.SmsManager: boolean setSmscAddress(String)>
<android.telephony.SmsManager: void getSmsMessagesForFinancialApp(Bundle,Executor,FinancialSmsCallback)>
<android.telephony.SmsManager: void sendTextMessageWithoutPersisting(String,String,String,PendingIntent,PendingIntent)>
<android.telephony.SubscriptionManager: List<SubscriptionInfo> getActiveSubscriptionInfoList()>
<android.telephony.SubscriptionManager: List<SubscriptionInfo> getOpportunisticSubscriptions()>
<android.telephony.SubscriptionManager: List<SubscriptionInfo> getSubscriptionsInGroup(ParcelUuid)>
<android.telephony.SubscriptionManager: ParcelUuid createSubscriptionGroup(List<Integer>)>
<android.telephony.SubscriptionManager: SubscriptionInfo getActiveSubscriptionInfo(int)>
<android.telephony.SubscriptionManager: SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int)>
<android.telephony.SubscriptionManager: boolean isActiveSubscriptionId(int)>
<android.telephony.SubscriptionManager: boolean setOpportunistic(boolean,int)>
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCount()>
<android.telephony.SubscriptionManager: void addSubscriptionsIntoGroup(List<Integer>,ParcelUuid)>
<android.telephony.SubscriptionManager: void removeSubscriptionsFromGroup(List<Integer>,ParcelUuid)>
<android.telephony.SubscriptionManager: void switchToSubscription(int,PendingIntent)>
<android.telephony.TelephonyManager: CellLocation getCellLocation()>
<android.telephony.TelephonyManager: List<CellInfo> getAllCellInfo()>
<android.telephony.TelephonyManager: List<NeighboringCellInfo> getNeighboringCellInfo()>
<android.telephony.TelephonyManager: List<UiccCardInfo> getUiccCardsInfo()>
<android.telephony.TelephonyManager: Map<Integer, List<EmergencyNumber>> getEmergencyNumberList()>
<android.telephony.TelephonyManager: Map<Integer, List<EmergencyNumber>> getEmergencyNumberList(int)>
<android.telephony.TelephonyManager: NetworkScan requestNetworkScan(NetworkScanRequest,Executor,NetworkScanCallback)>
<android.telephony.TelephonyManager: NetworkScan requestNetworkScan(NetworkScanRequest,NetworkScanCallback)>
<android.telephony.TelephonyManager: PersistableBundle getCarrierConfig()>
<android.telephony.TelephonyManager: ServiceState getServiceState()>
<android.telephony.TelephonyManager: String getDeviceId()>
<android.telephony.TelephonyManager: String getDeviceId(int)>
<android.telephony.TelephonyManager: String getDeviceSoftwareVersion()>
<android.telephony.TelephonyManager: String getGroupIdLevel1()>
<android.telephony.TelephonyManager: String getImei()>
<android.telephony.TelephonyManager: String getImei(int)>
<android.telephony.TelephonyManager: String getLine1Number()>
<android.telephony.TelephonyManager: String getMeid()>
<android.telephony.TelephonyManager: String getMeid(int)>
<android.telephony.TelephonyManager: String getNai()>
<android.telephony.TelephonyManager: String getSimSerialNumber()>
<android.telephony.TelephonyManager: String getSubscriberId()>
<android.telephony.TelephonyManager: String getVisualVoicemailPackageName()>
<android.telephony.TelephonyManager: String getVoiceMailAlphaTag()>
<android.telephony.TelephonyManager: String getVoiceMailNumber()>
<android.telephony.TelephonyManager: String[] getForbiddenPlmns()>
<android.telephony.TelephonyManager: boolean doesSwitchMultiSimConfigTriggerReboot()>
<android.telephony.TelephonyManager: boolean isDataEnabled()>
<android.telephony.TelephonyManager: boolean isDataRoamingEnabled()>
<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(String,boolean)>
<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(String,boolean,int)>
<android.telephony.TelephonyManager: int getDataNetworkType()>
<android.telephony.TelephonyManager: int getNetworkSelectionMode()>
<android.telephony.TelephonyManager: int getNetworkType()>
<android.telephony.TelephonyManager: int getPreferredOpportunisticDataSubscription()>
<android.telephony.TelephonyManager: int getSubscriptionId(PhoneAccountHandle)>
<android.telephony.TelephonyManager: int getVoiceNetworkType()>
<android.telephony.TelephonyManager: int isMultiSimSupported()>
<android.telephony.TelephonyManager: int setForbiddenPlmns(List<String>)>
<android.telephony.TelephonyManager: void requestCellInfoUpdate(Executor,CellInfoCallback)>
<android.telephony.TelephonyManager: void sendUssdRequest(String,UssdResponseCallback,Handler)>
<android.telephony.TelephonyManager: void setDataEnabled(boolean)>
<android.telephony.TelephonyManager: void setNetworkSelectionModeAutomatic()>
<android.telephony.TelephonyManager: void switchMultiSimConfig(int)>
<android.telephony.euicc.EuiccManager: void deleteSubscription(int,PendingIntent)>
<android.telephony.euicc.EuiccManager: void downloadSubscription(DownloadableSubscription,boolean,PendingIntent)>
<android.telephony.euicc.EuiccManager: void switchToSubscription(int,PendingIntent)>
<android.telephony.euicc.EuiccManager: void updateSubscriptionNickname(int,String,PendingIntent)>
<android.telephony.ims.ImsMmTelManager: boolean isAdvancedCallingSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: boolean isTtyOverVolteEnabled()>
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiRoamingSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: boolean isVtSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: int getVoWiFiModeSetting()>
<android.telephony.ims.ImsMmTelManager: void getRegistrationTransportType(Executor,Consumer<Integer>)>
<android.telephony.ims.ImsMmTelManager: void registerImsRegistrationCallback(Executor,RegistrationCallback)>
<android.telephony.ims.ImsMmTelManager: void registerMmTelCapabilityCallback(Executor,CapabilityCallback)>
<android.telephony.ims.ImsMmTelManager: void unregisterImsRegistrationCallback(RegistrationCallback)>
<android.telephony.ims.ImsMmTelManager: void unregisterMmTelCapabilityCallback(CapabilityCallback)>
<android.telephony.ims.ImsRcsManager: void getRegistrationState(Executor,Consumer<Integer>)>
<android.telephony.ims.ImsRcsManager: void registerImsRegistrationCallback(Executor,RegistrationCallback)>
<android.telephony.ims.ImsRcsManager: void unregisterImsRegistrationCallback(RegistrationCallback)>
<android.telephony.ims.RcsUceAdapter: boolean isUceSettingEnabled()>
<android.telephony.ims.RegistrationManager: void getRegistrationState(Executor,Consumer<Integer>)>
<android.telephony.ims.RegistrationManager: void getRegistrationTransportType(Executor,Consumer<Integer>)>
<android.telephony.ims.RegistrationManager: void registerImsRegistrationCallback(Executor,RegistrationCallback)>
<android.telephony.ims.RegistrationManager: void unregisterImsRegistrationCallback(RegistrationCallback)>
<android.util.StatsLog: boolean logBinaryPushStateChanged(String,long,int,int,long[])>
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(InputMethodSubtype)>
<com.android.server.inputmethod.InputMethodManagerService.ShellCommandImpl: int onCommand(String)>
<com.android.server.os.BugreportManagerServiceImpl: IDumpstateToken setListener(String,IDumpstateListener,boolean)>
<com.android.server.os.BugreportManagerServiceImpl: void cancelBugreport()>
<com.android.server.os.BugreportManagerServiceImpl: void startBugreport(int,String,FileDescriptor,FileDescriptor,int,IDumpstateListener)>
<com.android.settingslib.bluetooth.LocalBluetoothManager: LocalBluetoothManager create(Context,Handler,UserHandle)>
